// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/face_recognition/face_recognition.proto

package face_recognition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FaceRecognitionClient is the client API for FaceRecognition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaceRecognitionClient interface {
	// 批量生成人像编码
	GenerateFaceEncoding(ctx context.Context, in *GenerateFaceEncodingRequest, opts ...grpc.CallOption) (*GenerateFaceEncodingResponse, error)
	// 对比人像库，返回符合条件人列表的第一个符合人UserID & true, 若没有符合人，那么直接返回false
	CompareFaces(ctx context.Context, in *CompareFacesRequest, opts ...grpc.CallOption) (*CompareFacesResponse, error)
}

type faceRecognitionClient struct {
	cc grpc.ClientConnInterface
}

func NewFaceRecognitionClient(cc grpc.ClientConnInterface) FaceRecognitionClient {
	return &faceRecognitionClient{cc}
}

func (c *faceRecognitionClient) GenerateFaceEncoding(ctx context.Context, in *GenerateFaceEncodingRequest, opts ...grpc.CallOption) (*GenerateFaceEncodingResponse, error) {
	out := new(GenerateFaceEncodingResponse)
	err := c.cc.Invoke(ctx, "/go_interface.face_recognition.faceRecognition/GenerateFaceEncoding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceRecognitionClient) CompareFaces(ctx context.Context, in *CompareFacesRequest, opts ...grpc.CallOption) (*CompareFacesResponse, error) {
	out := new(CompareFacesResponse)
	err := c.cc.Invoke(ctx, "/go_interface.face_recognition.faceRecognition/CompareFaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceRecognitionServer is the server API for FaceRecognition service.
// All implementations must embed UnimplementedFaceRecognitionServer
// for forward compatibility
type FaceRecognitionServer interface {
	// 批量生成人像编码
	GenerateFaceEncoding(context.Context, *GenerateFaceEncodingRequest) (*GenerateFaceEncodingResponse, error)
	// 对比人像库，返回符合条件人列表的第一个符合人UserID & true, 若没有符合人，那么直接返回false
	CompareFaces(context.Context, *CompareFacesRequest) (*CompareFacesResponse, error)
	mustEmbedUnimplementedFaceRecognitionServer()
}

// UnimplementedFaceRecognitionServer must be embedded to have forward compatible implementations.
type UnimplementedFaceRecognitionServer struct {
}

func (UnimplementedFaceRecognitionServer) GenerateFaceEncoding(context.Context, *GenerateFaceEncodingRequest) (*GenerateFaceEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFaceEncoding not implemented")
}
func (UnimplementedFaceRecognitionServer) CompareFaces(context.Context, *CompareFacesRequest) (*CompareFacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareFaces not implemented")
}
func (UnimplementedFaceRecognitionServer) mustEmbedUnimplementedFaceRecognitionServer() {}

// UnsafeFaceRecognitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaceRecognitionServer will
// result in compilation errors.
type UnsafeFaceRecognitionServer interface {
	mustEmbedUnimplementedFaceRecognitionServer()
}

func RegisterFaceRecognitionServer(s grpc.ServiceRegistrar, srv FaceRecognitionServer) {
	s.RegisterService(&FaceRecognition_ServiceDesc, srv)
}

func _FaceRecognition_GenerateFaceEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFaceEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRecognitionServer).GenerateFaceEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_interface.face_recognition.faceRecognition/GenerateFaceEncoding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRecognitionServer).GenerateFaceEncoding(ctx, req.(*GenerateFaceEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceRecognition_CompareFaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareFacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRecognitionServer).CompareFaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_interface.face_recognition.faceRecognition/CompareFaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRecognitionServer).CompareFaces(ctx, req.(*CompareFacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaceRecognition_ServiceDesc is the grpc.ServiceDesc for FaceRecognition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaceRecognition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_interface.face_recognition.faceRecognition",
	HandlerType: (*FaceRecognitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateFaceEncoding",
			Handler:    _FaceRecognition_GenerateFaceEncoding_Handler,
		},
		{
			MethodName: "CompareFaces",
			Handler:    _FaceRecognition_CompareFaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/face_recognition/face_recognition.proto",
}
