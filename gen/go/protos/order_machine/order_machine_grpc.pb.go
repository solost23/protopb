// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: protos/order_machine/order_machine.proto

package order_machine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderMachineClient is the client API for OrderMachine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderMachineClient interface {
	// 创建订单
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	// 订单列表
	ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ListOrderResponse, error)
	// 订单状态流转
	SwitchOrderState(ctx context.Context, in *SwitchOrderStateRequest, opts ...grpc.CallOption) (*SwitchOrderStateResponse, error)
}

type orderMachineClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderMachineClient(cc grpc.ClientConnInterface) OrderMachineClient {
	return &orderMachineClient{cc}
}

func (c *orderMachineClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/go_interface.order_machine.OrderMachine/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderMachineClient) ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ListOrderResponse, error) {
	out := new(ListOrderResponse)
	err := c.cc.Invoke(ctx, "/go_interface.order_machine.OrderMachine/ListOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderMachineClient) SwitchOrderState(ctx context.Context, in *SwitchOrderStateRequest, opts ...grpc.CallOption) (*SwitchOrderStateResponse, error) {
	out := new(SwitchOrderStateResponse)
	err := c.cc.Invoke(ctx, "/go_interface.order_machine.OrderMachine/SwitchOrderState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderMachineServer is the server API for OrderMachine service.
// All implementations must embed UnimplementedOrderMachineServer
// for forward compatibility
type OrderMachineServer interface {
	// 创建订单
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	// 订单列表
	ListOrder(context.Context, *ListOrderRequest) (*ListOrderResponse, error)
	// 订单状态流转
	SwitchOrderState(context.Context, *SwitchOrderStateRequest) (*SwitchOrderStateResponse, error)
	mustEmbedUnimplementedOrderMachineServer()
}

// UnimplementedOrderMachineServer must be embedded to have forward compatible implementations.
type UnimplementedOrderMachineServer struct {
}

func (UnimplementedOrderMachineServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderMachineServer) ListOrder(context.Context, *ListOrderRequest) (*ListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedOrderMachineServer) SwitchOrderState(context.Context, *SwitchOrderStateRequest) (*SwitchOrderStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchOrderState not implemented")
}
func (UnimplementedOrderMachineServer) mustEmbedUnimplementedOrderMachineServer() {}

// UnsafeOrderMachineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderMachineServer will
// result in compilation errors.
type UnsafeOrderMachineServer interface {
	mustEmbedUnimplementedOrderMachineServer()
}

func RegisterOrderMachineServer(s grpc.ServiceRegistrar, srv OrderMachineServer) {
	s.RegisterService(&OrderMachine_ServiceDesc, srv)
}

func _OrderMachine_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderMachineServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_interface.order_machine.OrderMachine/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderMachineServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderMachine_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderMachineServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_interface.order_machine.OrderMachine/ListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderMachineServer).ListOrder(ctx, req.(*ListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderMachine_SwitchOrderState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchOrderStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderMachineServer).SwitchOrderState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_interface.order_machine.OrderMachine/SwitchOrderState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderMachineServer).SwitchOrderState(ctx, req.(*SwitchOrderStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderMachine_ServiceDesc is the grpc.ServiceDesc for OrderMachine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderMachine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_interface.order_machine.OrderMachine",
	HandlerType: (*OrderMachineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderMachine_CreateOrder_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _OrderMachine_ListOrder_Handler,
		},
		{
			MethodName: "SwitchOrderState",
			Handler:    _OrderMachine_SwitchOrderState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/order_machine/order_machine.proto",
}
