// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: oss/oss.proto

package oss

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OSSServiceClient is the client API for OSSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OSSServiceClient interface {
	// 向minio上传文件
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
}

type oSSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOSSServiceClient(cc grpc.ClientConnInterface) OSSServiceClient {
	return &oSSServiceClient{cc}
}

func (c *oSSServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/oss.OSSService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSSServiceServer is the server API for OSSService service.
// All implementations must embed UnimplementedOSSServiceServer
// for forward compatibility
type OSSServiceServer interface {
	// 向minio上传文件
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	mustEmbedUnimplementedOSSServiceServer()
}

// UnimplementedOSSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOSSServiceServer struct {
}

func (UnimplementedOSSServiceServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedOSSServiceServer) mustEmbedUnimplementedOSSServiceServer() {}

// UnsafeOSSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSSServiceServer will
// result in compilation errors.
type UnsafeOSSServiceServer interface {
	mustEmbedUnimplementedOSSServiceServer()
}

func RegisterOSSServiceServer(s grpc.ServiceRegistrar, srv OSSServiceServer) {
	s.RegisterService(&OSSService_ServiceDesc, srv)
}

func _OSSService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.OSSService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OSSService_ServiceDesc is the grpc.ServiceDesc for OSSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oss.OSSService",
	HandlerType: (*OSSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _OSSService_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oss/oss.proto",
}
